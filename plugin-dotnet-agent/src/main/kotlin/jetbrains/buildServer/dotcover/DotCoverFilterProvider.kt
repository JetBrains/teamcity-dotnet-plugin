package jetbrains.buildServer.dotcover

import jetbrains.buildServer.agent.runner.ParameterType
import jetbrains.buildServer.agent.runner.ParametersService
import jetbrains.buildServer.dotnet.CoverageConstants
import jetbrains.buildServer.dotnet.DotnetConstants
import kotlin.collections.ArrayList

class DotCoverFilterProvider(
    private val _parametersService: ParametersService,
    private val _coverageFilterConverter: DotCoverFilterConverter,
) : CoverageFilterProvider {
    override val filters: Sequence<CoverageFilter> get() {
        val filters = ArrayList<CoverageFilter>()
        _parametersService.tryGetParameter(ParameterType.Runner, CoverageConstants.PARAM_DOTCOVER_FILTERS)?.let {
            for (filter in _coverageFilterConverter.convert(it).map { toModuleFilter(it) }) {
                filters.add(filter)
            }
        }

        if (filters.size == 0) {
            filters.addAll(0, DefaultIncludeFilters)
        }

        addAdditionalAnyFilterWhenHasOutdatedAnyFilter(filters, CoverageFilter.CoverageFilterType.Include)
        addAdditionalAnyFilterWhenHasOutdatedAnyFilter(filters, CoverageFilter.CoverageFilterType.Exclude)

        if (defaultExcludeFiltersEnabled) {
            filters.addAll(DefaultExcludeFilters)
        }

        return filters.asSequence()
    }

    override val attributeFilters get() = sequence<CoverageFilter> {
        _parametersService.tryGetParameter(ParameterType.Runner, CoverageConstants.PARAM_DOTCOVER_ATTRIBUTE_FILTERS)?.let {
            for (filter in _coverageFilterConverter.convert(it).map { toAttributeFilter(it) }) {
                if (filter.type == CoverageFilter.CoverageFilterType.Exclude && CoverageFilter.Any != filter.classMask) {
                    yield(filter)
                }
            }
        }

        if (defaultExcludeAttributeFiltersEnabled) {
            yieldAll(DefaultExcludeAttributeFilters)
        }
    }

    private fun addAdditionalAnyFilterWhenHasOutdatedAnyFilter(filters: MutableList<CoverageFilter>, type: CoverageFilter.CoverageFilterType) {
        val outdatedFilter = CoverageFilter(type, CoverageFilter.Any, "*.*", CoverageFilter.Any, CoverageFilter.Any)
        val additionalFilter = CoverageFilter(type, CoverageFilter.Any, CoverageFilter.Any, CoverageFilter.Any, CoverageFilter.Any)
        val anyIncludeFilter = filters.indexOf(outdatedFilter)
        if (anyIncludeFilter >= 0) {
            filters.add(anyIncludeFilter, additionalFilter)
        }
    }

    private fun getMask(mask: String, defaultMask: String): String {
        if (CoverageFilter.Any == mask) {
            return defaultMask
        }

        return mask
    }

    private fun toModuleFilter(filter: CoverageFilter) =
        CoverageFilter(
            filter.type,
            CoverageFilter.Any,
            getMask(filter.moduleMask, filter.defaultMask),
            filter.classMask,
            filter.functionMask
        )

    private fun toAttributeFilter(filter: CoverageFilter) =
        CoverageFilter(
            filter.type,
            CoverageFilter.Any,
            CoverageFilter.Any,
            getMask(filter.classMask, filter.defaultMask),
            CoverageFilter.Any
        )

    private val defaultExcludeFiltersEnabled get() =
        _parametersService.tryGetParameter(ParameterType.Configuration, DotnetConstants.PARAM_DOTCOVER_WRAPPER_COVER_DEFAULT_ASSEMBLY_FILTERS_ENABLED)
            ?.lowercase()
            ?.toBooleanStrictOrNull()
            ?: true

    private val defaultExcludeAttributeFiltersEnabled get() =
        _parametersService.tryGetParameter(ParameterType.Configuration, DotnetConstants.PARAM_DOTCOVER_WRAPPER_COVER_DEFAULT_ATTRIBUTE_FILTERS_ENABLED)
            ?.lowercase()
            ?.toBooleanStrictOrNull()
            ?: true

    companion object {
        internal val DefaultIncludeFilters = listOf(CoverageFilter(CoverageFilter.CoverageFilterType.Include, CoverageFilter.Any, CoverageFilter.Any, CoverageFilter.Any, CoverageFilter.Any))
        internal val DefaultExcludeFilters = listOf(
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, "TeamCity.VSTest.TestAdapter", CoverageFilter.Any, CoverageFilter.Any),
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, "TeamCity.MSBuild.Logger", CoverageFilter.Any, CoverageFilter.Any),
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, "testhost", "Microsoft.VisualStudio.TestPlatform.*", CoverageFilter.Any),
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, "testhost.net*", "Microsoft.VisualStudio.TestPlatform.*", CoverageFilter.Any),
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, CoverageFilter.Any, "AutoGeneratedProgram", CoverageFilter.Any),
        )
        internal val DefaultExcludeAttributeFilters = listOf(
            CoverageFilter(CoverageFilter.CoverageFilterType.Exclude, CoverageFilter.Any, CoverageFilter.Any, "System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute", CoverageFilter.Any)
        )
    }
}