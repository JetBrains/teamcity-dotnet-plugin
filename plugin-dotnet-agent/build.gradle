/*
 * Copyright 2000-2022 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'com.github.rodm.teamcity-agent' version "1.3.2"
  id 'de.undercouch.download'
}

teamcity {
  version = teamcityVersion
  agent {
    descriptor = project.file('teamcity-plugin.xml')
    files {
      into('tools') {
        from('tools')
      }
    }
  }
}

dependencies {
  implementation project(':plugin-dotnet-common')
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.10'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
  provided "org.jetbrains.teamcity.internal:agent:${teamcityVersion}"
  provided "org.jetbrains.teamcity:common-api:${teamcityVersion}"
  implementation 'commons-io:commons-io:2.6'
  testImplementation 'org.testng:testng:7.1.0'
  testImplementation 'org.jmock:jmock:2.5.1'
  testImplementation 'org.hamcrest:hamcrest-all:1.3'
  testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
  testImplementation 'io.mockk:mockk:1.9.3'
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
}

class PreparePackagesTask extends DefaultTask {
  @TaskAction
  def run() {
    ant.delete(dir: './tools')
    ant.mkdir(dir: './tools')

    def integrationPackageVersion = '1.0.28'
    def integrationPackageId = 'TeamCity.Dotnet.Integration/' + integrationPackageVersion

    println 'Processing ' + integrationPackageId
    ant.delete(dir: './packages')
    ant.mkdir(dir: './packages')
    ant.get(src: 'https://www.nuget.org/api/v2/package/' +  integrationPackageId, dest: './packages/package.zip', skipexisting: 'true')
    ant.unzip(src: './packages/package.zip', dest: './packages')
    ant.move(todir: './tools', overwrite: 'true', force: 'true') {
      fileset(dir: './packages/build/_common', includes: '**/*')
    }
    ant.delete(dir: './packages')
  }
}

task preparePackagesTask(type: PreparePackagesTask)

agentPlugin.dependsOn(preparePackagesTask)

agentPlugin.version = null
agentPlugin.baseName = projectIds.artifact