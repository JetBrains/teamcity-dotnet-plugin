plugins {
    id 'io.github.rodm.teamcity-agent' version '1.5.2'
    id 'de.undercouch.download' version '5.2.1'
    id 'plugin.conventions'
}

teamcity {
    version = project.teamcityVersion
    allowSnapshotVersions = true
    agent {
        descriptor = project.file('teamcity-plugin.xml')
        files {
            into('tools') {
                from('tools')
            }
        }
    }
}

dependencies {
    implementation project(':plugin-dotnet-common')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.22'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1'
    provided "org.jetbrains.teamcity.internal:agent:${teamcityVersion}",
             "org.jetbrains.teamcity.internal:dependency-cache-agent:${teamcityVersion}"
    implementation 'commons-io:commons-io:2.11.0'
    compileOnly "org.jetbrains.intellij.deps:coverage-report:1.0.15"
    implementation fileTree(dir: "$project.projectDir.parentFile/lib/compile", include: ['coverage-report*.jar'])

    testImplementation 'org.testng:testng:7.5'
    testImplementation 'org.jmock:jmock:2.12.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'io.mockk:mockk:1.13.2'
    testImplementation "org.jetbrains.teamcity:tests-support:${teamcityVersion}"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.1'
    testImplementation 'org.testcontainers:testcontainers:1.20.4'
    testImplementation fileTree(dir: "$project.projectDir.parentFile/lib/test", include: ['freemarker*.jar'])

    constraints {
        implementation('xom:xom:1.3.7') {
            because 'Pinning transitive dependency of TeamCity Open API which causes compilation error'
        }
    }
}

test.useTestNG() { excludeGroups("integration") }
task integrationTest(type: Test) {
    useTestNG() { includeGroups 'integration' }
}

class PreparePackagesTask extends DefaultTask {
    @TaskAction
    def run() {
        def toolsDir = new File(project.projectDir, 'tools')
        def dotnetToolsDir = new File(project.projectDir, 'dotnet-tools')

        ant.delete(dir: toolsDir)
        ant.mkdir(dir: toolsDir)

        def integrationPackageVersion = '1.0.34'
        def integrationPackageId = 'TeamCity.Dotnet.Integration/' + integrationPackageVersion

        println 'Processing ' + integrationPackageId
        ant.delete(dir: './packages')
        ant.mkdir(dir: './packages')
        ant.get(src: 'https://www.nuget.org/api/v2/package/' + integrationPackageId, dest: './packages/package.zip', skipexisting: 'true')
        ant.unzip(src: './packages/package.zip', dest: './packages')

        // move downloaded packages to ./tools
        ant.move(todir: toolsDir, overwrite: 'true', force: 'true') {
            fileset(dir: './packages/build/_common', includes: '**/*')
        }
        ant.delete(dir: './packages')
    }
}

task preparePackagesTask(type: PreparePackagesTask)

task unitTestDotnetTestSuppressor(type: Exec) {
    onlyIf { !isDotnetTasksDisabled }
    commandLine 'dotnet', 'test',
        './src/test/csharp/TeamCity.Dotnet.TestSuppressor/TeamCity.Dotnet.TestSuppressor.UnitTests'
}

task integrationTestDotnetTestSuppressor(type: Exec) {
    onlyIf { !isDotnetTasksDisabled }
    commandLine 'dotnet', 'test',
        './src/test/csharp/TeamCity.Dotnet.TestSuppressor/TeamCity.Dotnet.TestSuppressor.IntegrationTests',
        '--logger', '"console;verbosity=detailed"'
}

task cleanDotnetTestSuppressor(type: Exec) {
    onlyIf { !isDotnetTasksDisabled }
    delete './tools/test-suppressor'
    commandLine 'dotnet', 'clean',
        './src/main/csharp/TeamCity.Dotnet.TestSuppressor/TeamCity.Dotnet.TestSuppressor.sln',
        '--configuration', 'Release'
}

task publishDotnetTestSuppressor(type: Exec) {
    onlyIf { !isDotnetTasksDisabled }
    mustRunAfter preparePackagesTask
    dependsOn cleanDotnetTestSuppressor, unitTestDotnetTestSuppressor

    commandLine 'dotnet', 'publish',
        './src/main/csharp/TeamCity.Dotnet.TestSuppressor/TeamCity.Dotnet.TestSuppressor',
        '--configuration', 'Release',
        '--framework', 'net6.0',    // publish only for .NET 6.0 and make it compatible with higher versions via running with `--roll-forward LatestMajor`
        '-p:InformationalVersion=' + teamcityVersion,
        '--output', './dotnet-tools/test-suppressor'
}


task moveDotnetToolsContents(type: Copy) {
    mustRunAfter publishDotnetTestSuppressor
    def sourceDir = file('./dotnet-tools')
    if (!sourceDir.exists()) {
        return
    }

    from sourceDir
    into file('./tools')
    
    doLast {
        sourceDir.delete()
    }
}

clean.dependsOn(cleanDotnetTestSuppressor)
test.dependsOn(unitTestDotnetTestSuppressor)
agentPlugin.dependsOn(preparePackagesTask, publishDotnetTestSuppressor, moveDotnetToolsContents)

agentPlugin.version = null
agentPlugin.baseName = projectIds.artifact