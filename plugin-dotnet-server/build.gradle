plugins {
  id 'io.github.rodm.teamcity-server' version '1.5.2'
  id 'plugin.conventions'
}

teamcity {
  version = project.teamcityVersion
  allowSnapshotVersions = true
  server {
    descriptor = project.file('teamcity-plugin.xml')
    tokens = [Plugin_Version: project.version]
    files {
      into('kotlin-dsl') {
        from("${rootProject.projectDir}/kotlin-dsl")
      }
      into('server/tool-descriptors') {
        from('tool-descriptors')
      }
      into('server/dotNetRunners') {
        from('dotNetRunners')
      }
    }
  }
}

dependencies {
  implementation project(':plugin-dotnet-common')
  implementation 'com.google.code.gson:gson:2.9.1'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.22'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1'
  provided "org.jetbrains.teamcity.internal:server-tools:${teamcityVersion}"
  provided "org.jetbrains.teamcity.internal:server:${teamcityVersion}"
  provided "org.jetbrains.teamcity.internal:web:${teamcityVersion}"
  testImplementation 'org.testng:testng:7.5'
  testImplementation 'org.jmock:jmock-junit4:2.12.0'
  testImplementation 'io.mockk:mockk:1.13.2'
  testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.1'
  agent project(path: ':plugin-dotnet-agent', configuration: 'plugin')

  constraints {
    implementation('xom:xom:1.3.7') {
      because 'Pinning transitive dependency of TeamCity Open API which causes compilation error'
    }
  }
}

class PrepareToolDescriptorsTask extends DefaultTask {
  @TaskAction
  def run() {
    def toolDescriptorsDir = './tool-descriptors'
    ant.delete(dir: toolDescriptorsDir)
    ant.mkdir(dir: toolDescriptorsDir)
    ant.copy(todir: toolDescriptorsDir, overwrite: 'true', force: 'true'){
      fileset(file: "./dotcover-teamcity-plugin.xml")
      fileset(file: "./resharper-teamcity-plugin.xml")
    }
  }
}

tasks.register('prepareToolDescriptorsTask', PrepareToolDescriptorsTask)

serverPlugin.dependsOn(prepareToolDescriptorsTask)

serverPlugin.version = null
serverPlugin.baseName = projectIds.artifact