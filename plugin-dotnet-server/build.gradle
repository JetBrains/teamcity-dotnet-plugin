

plugins {
  id 'com.github.rodm.teamcity-server' version '1.4.1'
  id 'plugin.conventions'
}

teamcity {
  version = project.teamcityVersion
  allowSnapshotVersions = true
  server {
    descriptor = project.file('teamcity-plugin.xml')
    tokens = [Plugin_Version: project.version]
    files {
      into('kotlin-dsl') {
        from("${rootProject.projectDir}/kotlin-dsl")
      }
      into('server/bundled-tools/JetBrains.ReSharper.CommandLineTool') {
        from('bundled-tools/JetBrains.ReSharper.CommandLineTool')
      }
      into('server/bundled-tools/JetBrains.dotCover.CommandLineTool') {
        from('bundled-tools/JetBrains.dotCover.CommandLineTool')
      }
    }
  }
}

dependencies {
  implementation project(':plugin-dotnet-common')
  implementation 'com.google.code.gson:gson:2.9.1'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.20'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
  provided "org.jetbrains.teamcity.internal:server-tools:${teamcityVersion}"
  provided "org.jetbrains.teamcity.internal:server:${teamcityVersion}"
  testImplementation 'org.testng:testng:7.5'
  testImplementation 'org.jmock:jmock-junit4:2.12.0'
  testImplementation 'io.mockk:mockk:1.13.2'
  testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
  agent project(path: ':plugin-dotnet-agent', configuration: 'plugin')

  constraints {
    implementation('xom:xom:1.3.7') {
      because 'Pinning transitive dependency of TeamCity Open API which causes compilation error'
    }
  }
}

class PreparePackagesTask extends DefaultTask {
  @TaskAction
  def run() {
    ant.delete(dir: './bundled-tools')
    ant.mkdir(dir: './bundled-tools')

    def reSharperToolsPackageVersion = '2023.1.1'
    def reSharperToolsPackageId = 'JetBrains.ReSharper.CommandLineTools/' + reSharperToolsPackageVersion
    def reSharperToolDescriptor = 'bundled-tool.xml'
    def reSharperDir = 'JetBrains.ReSharper.CommandLineTool'
    def reSharperZipFilename = 'jetbrains.resharper-clt.bundled.zip'
    def reSharperNuSpecFilename = 'JetBrains.ReSharper.CommandLineTools.nuspec'
    def reSharperMainPackageDir = './packages'
    def reSharperMainPackagePattern = 'tools/**/*.*'
    ant.mkdir(dir: "./bundled-tools/$reSharperDir")
    preparePackages(reSharperToolsPackageId, reSharperToolDescriptor, reSharperDir, reSharperZipFilename,
            reSharperNuSpecFilename, reSharperMainPackageDir, reSharperMainPackagePattern)

    def dotCoverToolsPackageVersion = '2023.3.0-tc03'
    def dotCoverToolsPackageId = 'JetBrains.dotCover.CommandLineTools/' + dotCoverToolsPackageVersion
    def dotCoverToolDescriptor = 'bundled-dot-cover.xml'
    def dotCoverDir = 'JetBrains.dotCover.CommandLineTool'
    def dotCoverZipFilename = 'JetBrains.dotCover.CommandLineTools.bundled.zip'
    def dotCoverNuSpecFilename = 'JetBrains.dotCover.CommandLineTools.nuspec'
    def dotCoverMainPackageDir = './packages/tools'
    def dotCoverMainPackagePattern = '**/*.*'
    ant.mkdir(dir: "./bundled-tools/$dotCoverDir")
    preparePackages(dotCoverToolsPackageId, dotCoverToolDescriptor, dotCoverDir, dotCoverZipFilename,
            dotCoverNuSpecFilename, dotCoverMainPackageDir, dotCoverMainPackagePattern)
  }

  def preparePackages(toolPackageId, toolDescriptor, toolDirectory, zipFilename, nuspecFilename,
                      mainPackageDir, mainPackagePattern) {
    println "Processing $toolPackageId"
    ant.delete(dir: './packages')
    ant.mkdir(dir: './packages')
    ant.mkdir(dir: './packages/pack')
    ant.get(src: "https://www.nuget.org/api/v2/package/$toolPackageId", dest: './packages/package.zip', skipexisting: 'true')
    ant.unzip(src: './packages/package.zip', dest: './packages')
    ant.move(todir: './packages/pack', overwrite: 'true', force: 'true') {
      fileset(dir: mainPackageDir) {
        include(name: mainPackagePattern)
      }
    }

    ant.copy(todir: './packages', overwrite: 'true', force: 'true'){
      fileset(file: "./$toolDescriptor")
    }
    ant.move(file: "./packages/$toolDescriptor", tofile: './packages/pack/teamcity-plugin.xml', overwrite: 'true', force: 'true')

    ant.zip(destfile: "./bundled-tools/$toolDirectory/$zipFilename") {
      fileset(dir: './packages/pack') {
        include(name: '**/*.*')
      }
    }
    ant.move(file: "./packages/$nuspecFilename", todir: "./bundled-tools/$toolDirectory", overwrite: 'true', force: 'true')
    ant.copy(todir: "./bundled-tools/$toolDirectory", overwrite: 'true', force: 'true'){
      fileset(file: "./$toolDescriptor")
    }

    ant.delete(dir: './packages')
  }
}

task preparePackagesTask(type: PreparePackagesTask)

serverPlugin.dependsOn(preparePackagesTask)

serverPlugin.version = null
serverPlugin.baseName = projectIds.artifact